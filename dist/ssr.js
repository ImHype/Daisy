(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.Daisy = {})));
}(this, (function (exports) { 'use strict';

// a-zA-Z

// A-Z

// A-Z

// a-zA-Z

//  0-9

// _

// $

// !

// <

// !

// '||"

// =

// /

// >


// eslint-disable-next-line
 //console.log('debug:', message);

// eslint-disable-next-line

// eslint-disable-next-line














const getProppertyObject = (list) => {
    return list.reduce((prev, {name, value}) => {
        return Object.assign(prev, {
            [name]: value
        });
    }, {});
};










const uid = () => {
    let id =  -1;
    return () => {
        return ++id;
    };
};

class Element {
    constructor(tag = '', props = [], context = {}, children = [], links = {}, key) {
        this.isElament = true;
        this.tag = tag;
        this.props = Array.isArray(props) ? getProppertyObject(props): props;
        this.context = context;
        this.children = children;
        this.links = links;
        this.key = key;
    }

    static create(...args) {
        return new Element(...args);
    }

    static clone(element) {
        const newElement = new Element();
        return Object.assign(newElement, element);
    }

    static isInstance(element) {
        return element && element.isElament;
    }
}

// link element or Component as vElement
function link(node, element) {
    const {links} = element;
    const ondestroy = Object.keys(links).map(
        (name) =>  {
            const {link, binding} = links[name];
            return link(node, binding, element);
        }
    );

    element.ondestroy = () => {
        ondestroy.forEach(item => item());
    };

    element.ondestroy.id = uid();
}

class VComponent extends Element {
    constructor(...args) {
        super(...args); 
    }

    setConstructor(constructor) {
        this.constructor = constructor;
        return this;
    }

    create() {
        const {constructor: Constructor, props, children, context} = this; 
    
        const component = new Constructor({
            state: props,
            body: children,
            context
        });

        link(component, this);
    
        this.ref = component;

        return component;
    }

    static create(...args) {
        return new VComponent(...args);
    }

    static isInstance(something) {
        return something instanceof VComponent;
    }
}

const VDOM = 'vDOM';  // Symbol('vDOM');
  // Symbol('rDOM');
 //Symbol('event');

function getVTree(vTree) {
    let temp = [];

    vTree.forEach((item) => {
        if (VComponent.isInstance(item)) {
            if (item.ref) {
                temp = [
                    ...temp,
                    ...getVTree(item.ref[VDOM])
                ];
            } else {
                temp.push(item);
            }
        } else if (Element.isInstance(item)) {
            const copy = Element.clone(item);
            const children = getVTree(item.children);
            copy.children = children;
            copy.origin = item;
            temp.push(copy);
        } else { //  if (typeof item === 'string')
            temp.push(item);
        }
    });
    return temp;
}

function createElements(elements) {
    const fragment = elements.map(
        element => createElement(element)
    );
    return fragment.join('');
}

function createElement(element) {
    const {props, tag, children} = element;

    if (Element.isInstance(element)) {
        const childrenString = createElements(children); // children
        const propsString = getProps(element, props);       // props
        return `<${tag} ${propsString}>${childrenString}</${tag}>`;
    }
    
    return element;
}

function getProps(node, props) {
    return Object.keys(props).map((name) => {
        return `${name}='${props[name] || ''}'`;
    }).join(' ');
}

var createRenderer = function() {
    return {
        renderToString(app) {
            const vDom = app[VDOM];
            const vTree = getVTree(vDom);
            return createElements(vTree);
        }
    };
};

exports.createRenderer = createRenderer;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
